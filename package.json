{
  "name": "EBA7CE416DD416B0E91442E9D5C72EF70B0111E365DF861D9A4B89BA7DAD1E3C",
  "version": "0.0.0",
  "private": true,
  "author": "k-kinzal",
  "description": "Example for AWS Lambda + SAM.",
  "licenses": "MIT",
  "engines": {
    "node": "4.3.2"
  },
  "config": {
    "resource_prefix": "",
    "s3_bucket": "eba7ce4",
    "stack_name": "eba7ce4",
    "key_id": "",
    "iam_role_arn": ""
  },
  "scripts": {
    "postinstall": "flow-typed install",
    "init:mkdir": "mkdirp .dist",
    "init:prefix": "read -p \"Please input prefix of resources[]:\" p; npm config set ${npm_package_name}:resource_prefix \"${p}\"",
    "init:bucket": "p=$(npm config get ${npm_package_name}:resource_prefix);read -p \"Please input bucket name[${p}eba7ce4]:\" s; npm config set ${npm_package_name}:s3_bucket \"${p}${s:-eba7ce4}\"",
    "init:stack": "p=$(npm config get ${npm_package_name}:resource_prefix);read -p \"Please input stack name[${p}eba7ce4]:\" s; npm config set ${npm_package_name}:stack_name \"${p}${s:-eba7ce4}\"",
    "init": "npm run init:mkdir && npm run init:prefix && npm run init:bucket && npm run init:stack",
    "prepare:stack": "aws ${npm_config_profile:+--profile $npm_config_profile} ${npm_config_region:+--region $npm_config_region} cloudformation create-stack --stack-name ${npm_package_config_stack_name}-prepare --template-body file://resources.yml --parameters ParameterKey=BucketName,ParameterValue=${npm_package_config_s3_bucket} --capabilities CAPABILITY_IAM",
    "prepare:wait": "aws ${npm_config_profile:+--profile $npm_config_profile} ${npm_config_region:+--region $npm_config_region} cloudformation wait stack-create-complete --stack-name ${npm_package_config_stack_name}-prepare",
    "prepare:config:key-id": "npm config set ${npm_package_name}:key_id <<<EOS `aws ${npm_config_profile:+--profile $npm_config_profile} ${npm_config_region:+--region $npm_config_region} cloudformation describe-stacks --stack-name ${npm_package_config_stack_name}-prepare | jq -r '.Stacks[].Outputs | map(select(.OutputKey == \"KeyId\")) | .[].OutputValue'` EOS",
    "prepare:config:custom-resource-arn": "npm config set ${npm_package_name}:custom_resource_arn <<<EOS `aws ${npm_config_profile:+--profile $npm_config_profile} ${npm_config_region:+--region $npm_config_region} cloudformation describe-stacks --stack-name ${npm_package_config_stack_name}-prepare | jq -r '.Stacks[].Outputs | map(select(.OutputKey == \"StepFunctionsCustomResourceArn\")) | .[].OutputValue'` EOS",
    "prepare:config:iam-role-arn": "npm config set ${npm_package_name}:iam_role_arn <<<EOS `aws ${npm_config_profile:+--profile $npm_config_profile} ${npm_config_region:+--region $npm_config_region} cloudformation describe-stacks --stack-name ${npm_package_config_stack_name}-prepare | jq -r '.Stacks[].Outputs | map(select(.OutputKey == \"LambdaExectionRoleArn\")) | .[].OutputValue'` EOS",
    "prepare": "npm run prepare:stack --profile=$npm_config_profile --region=$npm_config_region && npm run prepare:wait --profile=$npm_config_profile --region=$npm_config_region && npm run prepare:config:key-id --profile=$npm_config_profile --region=$npm_config_region && npm run prepare:config:custom-resource-arn --profile=$npm_config_profile --region=$npm_config_region && npm run prepare:config:iam-role-arn --profile=$npm_config_profile --region=$npm_config_region",
    "encrypt": "aws ${npm_config_profile:+--profile $npm_config_profile} ${npm_config_region:+--region $npm_config_region} kms encrypt --key-id ${npm_package_config_key_id} --output text --query CiphertextBlob --plaintext",
    "deploy:archive": "bestzip .dist/src.zip src/*",
    "deploy:package": "aws ${npm_config_profile:+--profile $npm_config_profile} ${npm_config_region:+--region $npm_config_region} cloudformation package --template-file template.yml --output-template-file .dist/template.yml --s3-bucket ${npm_package_config_s3_bucket}",
    "deploy:lambda": "aws ${npm_config_profile:+--profile $npm_config_profile} ${npm_config_region:+--region $npm_config_region} cloudformation deploy --template-file .dist/template.yml --stack-name ${npm_package_config_stack_name} --capabilities CAPABILITY_IAM --parameter-overrides LambdaExectionRoleArn=${npm_package_config_iam_role_arn} StepFunctionsCustomResourceArn=${npm_package_config_custom_resource_arn}",
    "deploy": "npm run deploy:archive && npm run deploy:package --profile=$npm_config_profile --region=$npm_config_region && npm run deploy:lambda --profile=$npm_config_profile --region=$npm_config_region",
    "destroy": "aws ${npm_config_profile:+--profile $npm_config_profile} ${npm_config_region:+--region $npm_config_region} cloudformation delete-stack --stack-name ${npm_package_config_stack_name}",
    "prepare-destroy:s3-objects": "aws s3 ${npm_config_profile:+--profile $npm_config_profile} ${npm_config_region:+--region $npm_config_region} rm s3://${npm_package_config_s3_bucket} --recursive",
    "prepare-destroy:stack": "aws ${npm_config_profile:+--profile $npm_config_profile} ${npm_config_region:+--region $npm_config_region} cloudformation delete-stack --stack-name ${npm_package_config_stack_name}-prepare",
    "prepare-destroy:config:iam-role-arn": "npm config delete ${npm_package_name}:iam_role_arn",
    "prepare-destroy:config:key-id": "npm config delete ${npm_package_name}:key_id",
    "prepare-destroy": "npm run prepare-destroy:s3-objects --profile=$npm_config_profile --region=$npm_config_region && npm run prepare-destroy:stack --profile=$npm_config_profile --region=$npm_config_region && npm run prepare-destroy:config:iam-role-arn && npm run prepare-destroy:config:key-id",
    "clean:stack": "npm config delete ${npm_package_name}:resource_prefix",
    "clean:bucket": "npm config delete ${npm_package_name}:s3_bucket",
    "clean:prefix": "npm config delete ${npm_package_name}:stack_name",
    "clean:dir": "rimraf .dist",
    "clean": "npm run clean:stack && npm run clean:bucket && npm run clean:prefix && npm run clean:dir",
    "lint": "eslint src/",
    "check": "flow check"
  },
  "dependencies": {
    "aws-sdk": "^2.7.13",
    "lodash": "^4.17.2",
    "node-uuid": "^1.4.7"
  },
  "devDependencies": {
    "bestzip": "^1.1.3",
    "eslint": "^3.11.1",
    "eslint-config-standard": "^6.2.1",
    "eslint-plugin-flowtype": "^2.29.1",
    "eslint-plugin-node": "^3.0.5",
    "eslint-plugin-promise": "^3.4.0",
    "eslint-plugin-standard": "^2.0.1",
    "flow-bin": "^0.36.0",
    "flow-typed": "^2.0.0",
    "mkdirp": "^0.5.1",
    "rimraf": "^2.5.4"
  }
}
